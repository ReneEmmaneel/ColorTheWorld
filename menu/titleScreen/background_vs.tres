[gd_resource type="VisualShader" load_steps=20 format=2]

[ext_resource path="res://menu/titleScreen/new_noisetexture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 5.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=2]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=3]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=6]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorCompose" id=7]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=8]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.26 ]

[sub_resource type="VisualShaderNodeColorConstant" id=9]
output_port_for_preview = 0
constant = Color( 0.0664063, 0.256042, 1, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=10]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 4

[sub_resource type="VisualShaderNodeScalarOp" id=11]
default_input_values = [ 0, 0.0, 1, 40.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeScalarOp" id=18]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.8 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=19]
default_input_values = [ 0, 0.0, 1, 0.2 ]

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 3.14159 ]

[sub_resource type="VisualShaderNodeScalarOp" id=21]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 6.28319 ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=15]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=16]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeColorOp" id=17]
output_port_for_preview = 0
operator = 3

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_11;



void vertex() {
// Output:0

}

void fragment() {
// Input:15
	vec3 n_out15p0 = vec3(UV, 0.0);

// VectorDecompose:16
	float n_out16p0 = n_out15p0.x;
	float n_out16p1 = n_out15p0.y;
	float n_out16p2 = n_out15p0.z;

// Input:3
	float n_out3p0 = TIME;

// ScalarOp:21
	float n_in21p1 = 40.00000;
	float n_out21p0 = n_out3p0 / n_in21p1;

// ScalarOp:20
	float n_in20p1 = 1.00000;
	float n_out20p0 = mod(n_out21p0, n_in20p1);

// ScalarOp:18
	float n_out18p0 = n_out16p0 + n_out20p0;

// VectorCompose:17
	float n_in17p2 = 0.00000;
	vec3 n_out17p0 = vec3(n_out18p0, n_out16p1, n_in17p2);

// Texture:11
	vec4 tex_frg_11_read = texture(tex_frg_11, n_out17p0.xy);
	vec3 n_out11p0 = tex_frg_11_read.rgb;
	float n_out11p1 = tex_frg_11_read.a;

// ScalarFunc:22
	float n_out22p0 = round(dot(n_out11p0, vec3(0.333333, 0.333333, 0.333333)));

// ScalarOp:23
	float n_in23p1 = 0.80000;
	float n_out23p0 = n_out22p0 * n_in23p1;

// ScalarOp:24
	float n_in24p1 = 0.20000;
	float n_out24p0 = n_out23p0 + n_in24p1;

// Color:2
	vec3 n_out2p0 = vec3(0.066406, 0.256042, 1.000000);
	float n_out2p1 = 1.000000;

// ScalarOp:10
	float n_in10p1 = 5.00000;
	float n_out10p0 = n_out3p0 / n_in10p1;

// ScalarFunc:5
	float n_out5p0 = cos(n_out10p0);

// ScalarOp:25
	float n_in25p1 = 3.14159;
	float n_out25p0 = n_out5p0 + n_in25p1;

// ScalarOp:26
	float n_in26p1 = 6.28319;
	float n_out26p0 = n_out25p0 / n_in26p1;

// ColorOp:6
	vec3 n_out6p0 = max(n_out2p0, vec3(n_out26p0));

// VectorOp:12
	vec3 n_out12p0 = vec3(n_out24p0) * n_out6p0;

// Output:0
	COLOR.rgb = n_out12p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -675.172, -224 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1360, 180 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( 520, 280 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( -620, 320 )
nodes/fragment/5/node = SubResource( 16 )
nodes/fragment/5/position = Vector2( -240, 320 )
nodes/fragment/6/node = SubResource( 17 )
nodes/fragment/6/position = Vector2( 720, 320 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -400, 300 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 480, -140 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 1080, 200 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( -540, -140 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( -400, -140 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 80, -140 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( -160, -140 )
nodes/fragment/20/node = SubResource( 10 )
nodes/fragment/20/position = Vector2( -200, 60 )
nodes/fragment/21/node = SubResource( 11 )
nodes/fragment/21/position = Vector2( -400, 140 )
nodes/fragment/22/node = SubResource( 12 )
nodes/fragment/22/position = Vector2( 640, 20 )
nodes/fragment/23/node = SubResource( 18 )
nodes/fragment/23/position = Vector2( 800, 0 )
nodes/fragment/24/node = SubResource( 19 )
nodes/fragment/24/position = Vector2( 964.797, -6 )
nodes/fragment/25/node = SubResource( 20 )
nodes/fragment/25/position = Vector2( -60, 340 )
nodes/fragment/26/node = SubResource( 21 )
nodes/fragment/26/position = Vector2( 120, 320 )
nodes/fragment/connections = PoolIntArray( 3, 0, 10, 0, 10, 0, 5, 0, 2, 0, 6, 0, 6, 0, 12, 1, 15, 0, 16, 0, 16, 1, 17, 1, 17, 0, 11, 0, 16, 0, 18, 0, 3, 0, 21, 0, 21, 0, 20, 0, 11, 0, 22, 0, 20, 0, 18, 1, 18, 0, 17, 0, 12, 0, 0, 0, 22, 0, 23, 0, 23, 0, 24, 0, 24, 0, 12, 0, 5, 0, 25, 0, 25, 0, 26, 0, 26, 0, 6, 1 )
